// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean cur_color;
    static int dx, dy, a, b, factor, factorX, factorY;
    static Array screen_arr;
    static Array helper_arr;


    /** Initializes the Screen. */
    function void init() {
        var int index, i;
        let index = 0;
        let i = 1;
        let helper_arr = Array.new(16);
        let screen_arr = 16384;
        let cur_color = true;
        while (index < 16){
            let helper_arr[index] = i;
            let index = index + 1;
            let i = i+i;
        }
        return;
    }

    /** Erases the entire screen_arr. */
    function void clearScreen() {
        var int index;
        let index = 8191;
        while(index > -1){
            let screen_arr[index] = false;
            let index = index - 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *    Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let cur_color = b;
        return;
    }

        /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int cur_address, cur_val;
        let cur_address = ((#(#(#(#x))))+(^(^(^(^(^y))))));
        let cur_val = Memory.peek(screen_arr + cur_address);
        if (~cur_color){
            do Memory.poke(screen_arr + cur_address, cur_val & (~helper_arr[x & 15]));
        }
        else {
            do Memory.poke(screen_arr + cur_address, cur_val | helper_arr[x & 15]);
        }
        return;
    }



    function void setDrawLine(int x1, int y1, int x2, int y2){
        if (y1 > y2){
        let dy = y1 - y2;
        let factorY = -1;
        }else{
            let dy = y2 - y1;
            let factorY = 1;
        }
        if (x1 > x2){
            let dx = x1 - x2;
            let factorX = -1;
        }else{
            let dx = x2 - x1;
            let factorX = 1;

        }
        return;
    }



    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        let a = 0;
        let b = 0;
        let factor = 0;
        do Screen.setDrawLine(x1, y1, x2, y2);

        if (dy = 0){
             while (~(a > dx)){
                  do Screen.drawPixel((a * factorX) + x1, y1);
                  let a = a + 1;
             }
            return;
        }
        if (dx = 0){
            while (~(b > dy)){
                do Screen.drawPixel(x1, (b * factorY) + y1);
                let b = b + 1;
            }
            return;
        }
        while ((~(Math.abs(b) > dy)) & (~(Math.abs(a) > dx))){
            do Screen.drawPixel(x1+a, y1+b);
            if (factor < 0){
                let factor = factor + dy;
                let a = a + factorX;
            }
            else{
                let factor = factor - dx;
                let b = b + factorY;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (y2 > y1){
            do Screen.drawLine(x1, y2, x2, y2);
            let y2 = y2 - 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int k, dy;
        let k = r*r;
        let dy = -r;
        while(~(dy > r)) {
            do Screen.drawLine(x-Math.sqrt(k-(dy*dy)), y+dy, x+Math.sqrt(k-(dy*dy)), y+dy);
            let dy = dy + 1;
        }
        return;
    }
}
