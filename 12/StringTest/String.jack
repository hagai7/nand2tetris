// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */


class String {

    field Array my_array;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength>0){
            let my_array = Array.new(maxLength);
        }
        else{
            let my_array = Array.new(1);
        }
        let length = 0;
        return this;

    }

    /** Disposes this string. */
    method void dispose() {
        do my_array.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return my_array[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let my_array[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let my_array[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
       if ( length > 0){
            let length = length - 1;}
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val, d;
        var boolean bool;
        let i = 0;
        let val = 0;
        let d = 0;
        let bool = false;
        if(my_array[0] = 45){
            let bool = true;
            let i = 1;
        }
        while((i < length) & (my_array[i] > 47) & (my_array[i] < 58)){
            let d = my_array[i] - 48;
            let i = i + 1;
            let val = (10*val) + d;
        }
        if(bool){
            return -val;
        }
        return val;
    }


     /** Sets this string to hold a representation of the given value. */
    method void helper(int val) {
        var int c;
        let c = 48 + val - ((val/10)*10);
        if (val > 9){
            do helper(val/10);
            do appendChar(c);
            return;
        }
        do appendChar(c);
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if (val < 0) {
            let val = -val;
            do appendChar(45);
        }

        do helper(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;

    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;

    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
