// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        static Array my_array;
        /** Initializes the library. */
        function void init() {
            let my_array = Array.new(16);
            let my_array[0] = 1;
            let my_array[1] = 2;
            let my_array[2] = 4;
            let my_array[3] = 8;
            let my_array[4] = 16;
            let my_array[5] = 32;
            let my_array[6] = 64;
            let my_array[7] = 128;
            let my_array[8] = 256;
            let my_array[9] = 512;
            let my_array[10] = 1024;
            let my_array[11] = 2048;
            let my_array[12] = 4096;
            let my_array[13] = 8192;
            let my_array[14] = 16384;
            let my_array[15] = 16384 + 16384;
            return;

        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if(x<0){
                return -x;
            }
            return x;

        }



        /**

         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            var int sum, shiftedX, ind;
            let sum = 0;
            let ind = 0;
            let shiftedX = x;
            if((x=0) | (y=0)){
                return 0;
            }
            while(ind < 16){
                if (my_array[ind] & y) {
                    let sum = sum + shiftedX;
                }
                let shiftedX = shiftedX + shiftedX;
                let ind = ind + 1;
            }
            return sum;
        }

        function boolean check_sign(int num){
            var boolean sign;
            if (num < 0){
               let sign = false;
            }
            if (num > 0){
                let sign = true;
            }
            return sign;
        }



        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {

            var boolean sign;
            var int q, result;
            if (y = 0) {
              do Sys.error(3);
            }

            if ((Math.check_sign(x) & (~Math.check_sign(y))) | (Math.check_sign(y) & (~Math.check_sign(x)))) {
                let sign = true;
            }

            let x = Math.abs(x);
            let y = Math.abs(y);


            if (y > x | y < 0) {
              return 0;
            }

            let q = Math.divide(x, 2*y);
            if ((x-(Math.multiply(2*q,y))) < y) {
                let result =  2*q;
            }
            else {
                let result = 2*q + 1;
            }

            if(sign){
               return -result;
            }
            return result;
        }


        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            var int y, j, deg;
            let y = 0;
            let j = 7;
            while (~j<0) {
                let deg = (y + my_array[j]) * (y + my_array[j]);
                if ((deg < x | (deg = x)) & deg > 0) {
                    let y = y + my_array[j];
                }
                let j = j - 1;
            }
            return y;
        }


        /** Returns the greater number. */
        function int max(int a, int b) {
            if(a>b){
                    return a;
                }
            return b;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if(a<b){
                return a;
            }
            return b;
        }
}
