// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {


        /** Initializes the keyboard. */
        function void init() {
            return;
        } 

        /**
         * Returns the character of the currently pressed key on the keyboard;
         * if no key is currently pressed, returns 0.
         *
         * Recognizes all ASCII characters, as well as the following keys:
         * new line = 128 = String.newline()
         * backspace = 129 = String.backspace()
         * left arrow = 130
         * up arrow = 131
         * right arrow = 132
         * down arrow = 133
         * home = 134
         * End = 135
         * page up = 136
         * page down = 137
         * insert = 138
         * delete = 139
         * ESC = 140
         * F1 - F12 = 141 - 152
         */
        function char keyPressed() {
            return Memory.peek(24576);
        }

        /**								
         * Waits until a key is pressed on the keyboard and released,
         * then echoes the key to the screen, and returns the character 
         * of the pressed key.
         */
        function char readChar() {
                var char cur_char;
                while(Keyboard.keyPressed() = 0){}
                let cur_char = Keyboard.keyPressed();
                while(~(Keyboard.keyPressed() = 0)){}
                do Output.printChar(cur_char);
            return cur_char;
        }

        /**								
         * Displays the message on the screen, reads from the keyboard the entered
         * text until a newline character is detected, echoes the text to the screen,
         * and returns its value. Also handles user backspaces if the current value
         * is longer than a single character.
         */
        function String readLine(String message) {
            // This should behave exactly like the built-in OS.
            // You can assume input is at most 64 characters long.
            // Why? Because this is the width of our screen!
            // Pseudocode:
            // 1. printString(message)
            // 2. let str = ""
            // 3. while true
            // 4.   let c = readChar()
            // 5.   if (c = newLine)
            // 6.      display newLine (if not displayed already by readChar())
            // 7.      return str
            // 8.   else if (c = backSpace)
            // 9.      remove the last character from str, if possible
            // 10.     move the cursor accordingly
            // 11.  else
            // 12.    str.appendChar(c)


            var String line;
            var char c;
            do Output.printString(message);
            let line = String.new(50);
            let c = Keyboard.readChar();
            while (~(c = 128)){
                if (~(c = 129)){
                    do line.appendChar(c);}
                else{
                    if (line.length() > 0){
                        do line.eraseLastChar();
                        do Output.backSpace();}}
                let c = Keyboard.readChar();
            }
            do Output.println();
            return line;
        }     

        /**								
         * Displays the message on the screen, reads from the keyboard the entered
         * text until a newline character is detected, echoes the text to the screen,
         * and returns its integer value (until the first non-digit character in the
         * entered text is detected). Also handles user backspaces. 
         */
        function int readInt(String message) {
            var String num;
            let num = Keyboard.readLine(message);
            return num.intValue();
        }
}
