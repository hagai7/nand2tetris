// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.



CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     // Put you code here:     

     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=aluout, zr=aluzr,ng=alung);
     Mux16 (a=y, b=x, sel=instruction[4], out=shift);
     ShiftRight (in=shift, out=right);
     ShiftLeft (in=shift, out=left);
     And(a=instruction[7], b=instruction[8], out=selMux);
     Mux16(a=right, b=left, sel=instruction[5], out=shifted);
     Mux16 (a=shifted, b=aluout, sel=selMux, out=out, out[0..7] = mux1, out[8..15] = mux2, out[15] = mux3);
     Or8Way(in=mux1, out=firstLast);
     Or8Way(in=mux2, out=secondLast);
     Or(a=firstLast, b=secondLast, out=res);
     Not(in=res,out = shzr);
     And16(a=true, b[0..7]=mux1,b[8..15]=mux2, out[15]=shng, out[0..15]=garbage);
     Mux(a=shng, b=alung, sel=selMux, out=ng);
     Mux(a=shzr, b=aluzr, sel=selMux, out=zr);
}
